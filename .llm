# reM3 - reMarkable Sync Tool

**reM3** - A Python tool to sync, organize, and export content from reMarkable tablets.

## Quick Start
```bash
python3 main.py go  # First-time setup and sync everything
```

## Project Structure
```
reMarkable/
├── main.py                 # CLI entry point
├── requirements.txt        # Dependencies (paramiko, pillow, cairosvg, openai)
├── .env                   # Local config (RM_HOST, RM_USER, RM_PASSWORD)
│
├── src/                   # Core modules
│   ├── sync/              # Extract from reMarkable
│   │   ├── pull.py        # SFTP operations
│   │   ├── index.py       # Build document index
│   │   └── organize.py    # Create collection structure (refactored for lower complexity)
│   ├── render/            # Transform to images
│   │   └── rm_to_image.py # Convert .rm files to images
│   ├── transcribe/        # Vision AI transcription
│   │   └── openai.py      # OpenAI Vision API
│   ├── cli/               # Interactive CLI interface (refactored)
│   │   ├── __init__.py    # CLI module exports
│   │   ├── interactive.py # Interactive greeting and menu system
│   │   ├── progress.py    # ProgressTracker for UI feedback
│   │   ├── transcription.py # TranscriptionManager for cost safeguards
│   │   ├── enhanced_cli.py # EnhancedCLI workflow orchestration
│   │   ├── workflows.py   # High-level workflow functions
│   │   └── browse.py      # DocumentBrowser for searching and viewing
│   ├── config.py          # Configuration management
│   ├── errors.py          # Unified error handling with custom exceptions
│   ├── setup.py           # Interactive setup
│   └── utils.py           # Common utilities
│
└── data/                  # Local data (gitignored)
    ├── raw/               # Raw files from tablet
    ├── organized/         # Exact tablet structure (copies)
    ├── catalog.json       # Searchable document catalog
    └── text/              # Exported text files
```

## Key Commands
- `python3 main.py` - Interactive menu with guidance (default, recommended)
- `python3 main.py --auto-run` - Complete workflow immediately (old behavior)
- `python3 main.py --auto-run --force-sync` - Force download all files
- `pull` - Smart sync: only download new/changed files from tablet
- `index` - Build searchable JSON catalog from raw files (conditional)
- `organize` - Preserve exact tablet collection structure (conditional)
- `browse` - Search, filter and view documents in rich CLI
- `status` - Show system status and document statistics
- `export-text` - Convert documents to text using OpenAI
- `setup` - Run configuration wizard

## Data Flow
1. **Pull**: Tablet → `data/raw/` (smart sync, only changed files)
2. **Index**: `data/raw/` → `data/catalog.json` (searchable metadata)
3. **Organize**: `data/raw/` → `data/organized/` (exact tablet structure)
4. **Browse**: Search and filter documents with rich CLI
5. **Export**: `data/raw/` → render → OpenAI → `data/text/`

## File Types
- `{uuid}.metadata` - Document metadata (JSON)
- `{uuid}.content` - Content info (JSON)
- `{uuid}.pdf/epub` - Imported documents
- `{uuid}/` - Notebook with .rm pages
- `{uuid}/*.rm` - Handwritten page data

## Key Modules
- **sync/**: Extract from reMarkable (pull via SFTP, index, organize collections)
- **render/**: Transform .rm files → SVG → PNG/JPEG using rmc and cairosvg
- **transcribe/**: Send images to AI vision models (OpenAI GPT-4 Vision)
- **cli/**: Interactive CLI interface with smart workflows and user guidance
  - **interactive.py**: Interactive greeting system with connectivity checks
  - **progress.py**: ProgressTracker for rich UI feedback
  - **transcription.py**: TranscriptionManager with cost safeguards
  - **enhanced_cli.py**: Main workflow orchestration
  - **workflows.py**: High-level workflow functions
  - **browse.py**: DocumentBrowser for searching and statistics
- **config.py**: Centralized configuration with .env support
- **errors.py**: Custom exceptions (SyncError, RenderError, TranscribeError) with emoji feedback

## Configuration
Environment variables or .env file:
- `RM_HOST` - Tablet IP (default: 10.11.99.1)
- `RM_USER` - SSH user (default: root)
- `RM_PASSWORD` - SSH password
- `OPENAI_API_KEY` - For text export

## Important Paths
- Raw storage renamed from "xochitl" to "raw" for clarity
- All paths use `Path` objects from pathlib
- Smart sync preserves file timestamps for proper change detection
- Organized structure uses copies (not symlinks) for better compatibility

## Recent Optimizations
- **Interactive CLI experience**: Friendly greeting, program explanation, guided workflows
- **Smart connectivity testing**: Checks tablet accessibility before attempting operations
- **Conditional operations**: Index/organize only run when files actually change (much faster)
- **Enhanced user experience**: Interactive menu vs auto-run flag for backward compatibility
- Smart sync: only downloads new/changed files (much faster subsequent syncs)
- JSON catalog: replaced low-level CSV with searchable document metadata
- Browse command: rich CLI for searching/filtering documents with enhanced statistics
- Preserve tablet structure: exact collection hierarchy in organized folder
- Render settings: DPI=200, stroke_scale=2.0, height=2000px, JPEG 95%
- Modularized main.py - now just a thin CLI orchestrator
- Logical folder structure: sync/, render/, transcribe/, cli/
- **Refactored CLI**: broke large cli.py into specialized modules (interactive, progress, transcription, browse, workflows)
- **Reduced cyclomatic complexity**: organize.py refactored into smaller focused functions
- Centralized configuration with generic paths (~/reM3)
- Clean module interfaces with simplified exports
- Unified error handling with custom exceptions and retry logic
- **Enhanced CLI defaults**: Interactive menu by default, --auto-run for immediate execution
- Zero diagnostics: all type errors, unused imports, and warnings resolved
